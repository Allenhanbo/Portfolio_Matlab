function route = DijkstraTorus(input_map, start_coords, dest_coords, drawMap)
% Run Dijkstra's algorithm on a grid.
% Inputs :
%   input_map : a logical array where the freespace cells are false or 0 and
%      the obstacles are true or 1
%   start_coords and dest_coords : Coordinates of the start and end cell
%       respectively, the first entry is the row and the second the column.
% Output :
%   route : An array containing the linear indices of the cells along the
%    shortest route from start to dest or an empty array if there is no
%    route.

% set up color map for display
% 1 - white - clear cell
% 2 - black - obstacle
% 3 - red = visited
% 4 - blue  - on list
% 5 - green - start
% 6 - yellow - destination

cmap = [1 1 1; ...
    0 0 0; ...
    1 0 0; ...
    0 0 1; ...
    0 1 0; ...
    1 1 0];

colormap(cmap);

%input_map = input_map(1:180,1:180);
[nrows, ncols] = size(input_map);

% map - a table that keeps track of the state of each grid cell
map = zeros(nrows,ncols);

map(~input_map) = 1;  % Mark free cells
map(input_map)  = 2;  % Mark obstacle cells

for m = 1:2
    if start_coords(m) == 181 
        start_coords(m) = 1;
    end 
    if dest_coords(m) == 181
        dest_coords(m) = 1; 
    end    
end 
% Generate linear indices of start and dest nodes

start_node = sub2ind(size(map), start_coords(1), start_coords(2));
dest_node  = sub2ind(size(map), dest_coords(1),  dest_coords(2));

map(start_node) = 5;
map(dest_node)  = 6;

% Initialize distance array
distances = Inf(nrows,ncols);

% For each grid cell this array holds the index of its parent

parent = zeros(nrows,ncols);
distances(start_node) = 0;

% Main Loop
while true
    
    % Draw current map
    map(start_node) = 5;
    map(dest_node) = 6;
    
    if drawMap
        image(1.5, 1.5, map);
        grid on;
        axis image;
        drawnow;
    end
                                             
    % Find the node with the minimum distance
    
    [min_dist, current] = min(distances(:));
    
    if ((current == dest_node) || isinf(min_dist))
        break
    end
    
    % Update map
    map(current) = 3;         % mark current node as visited
    distances(current) = Inf; % remove this node from further consideration
    
    % Compute row, column coordinates of current node
    [i, j] = ind2sub(size(distances), current);
%     if i == 181
%         i = 1;
%     end 
%     if j == 181 
%         j = 1;
%     end 
    current = sub2ind(size(distances),i , j);
    % Visit each neighbor of the current node and update the map, distances
    % and parent tables appropriately.
    
    for v = [1 -1]
        for k = (1:2)
            if k == 1 
                if i + v <= nrows-1 && i + v > 0   
                    if map (i+v , j) == 1 || map(i+v, j) == 6                          
                        if distances(i+v , j)> min_dist+2
                            distances(i+v , j) = min_dist+2;
                            parent(i+v , j) = current;
%                             disp('numExpanded');
%                             disp (numExpanded);    
%                             disp(sub2ind(size(input_map),i+v,j));                                 
                        end 
                    end
                    
                elseif i+v > nrows-1
                    position = 1;
                    if map (position , j) == 1 || map(position, j) == 6 
                        if distances(position , j)> min_dist+2
                            distances(position , j) = min_dist+2;
                            parent(position , j) = current;
                        end
                    end 
                
                elseif i + v < 1  
                    position = 180;
                    if map (position , j) == 1 || map(position, j) == 6 
                        if distances(position , j)> min_dist+2
                            distances(position , j) = min_dist+2;
                            parent(position , j) = current;
                        end
                    end                                  
                end                                          
            end 
            if k == 2
                if j + v <= ncols && j+v > 0 
                    if map(i, j+v) == 1 || map(i, j+v) == 6
                        if distances(i , j+v)> min_dist+2
                            distances(i , j+v) = min_dist+2;
                            parent(i , j+v) = current;
% %                             disp('numExpanded');
% %                             disp (numExpanded);
%                             disp(sub2ind(size(input_map),i,j+v));
                        end 
                    end
                elseif j + v > ncols-1
                    position = 1;
                    if map(i, position) == 1 || map(i, position) == 6
                        if distances(i , position)> min_dist+2
                            distances(i , position) = min_dist+2;
                            parent(i , position) = current;
% %                             disp('numExpanded');
% %                             disp (numExpanded);
%                             disp(sub2ind(size(input_map),i,j+v));
                        end 
                    end 
                elseif j + v <1
                    position = 180;
                    if map(i, position) == 1 || map(i, position) == 6
                        if distances(i , position)> min_dist+2
                            distances(i , position) = min_dist+2;
                            parent(i , position) = current;
% %                             disp('numExpanded');
% %                             disp (numExpanded);
%                             disp(sub2ind(size(input_map),i,j+v));
                        end 
                    end                                                           
                end  
            end
         end                          
     end
 end 
    
    
    % *******************************************************************


    if (isinf(distances(dest_node)))
        route = [];
    else
        route = dest_node;

        while (parent(route(1)) ~= 0)
            route = [parent(route(1)), route];
        end
    %     for k = 2:length(route) - 1        
    %         map(route(k)) = 7;
    %         pause(0.1);
    %         image(1.5, 1.5, map);
    %         grid on;
    %         axis image;
    %     end
    end

end
